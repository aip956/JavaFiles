

Arrays & Hashing
Contains Duplicate
    - Make a set; if set.size() != array.length, return true
    - sets and hashes use size(); arrays use length()
Valid Anagram	OK
    - Add s to freq hash, subtract t from it
    - need to check s and t = length
    - for letter in t, if not in sFreq, retn false
    - and if count <= 0, return false
    - subtract count; sFreq.put(letter, count - 1)
Two Sum	    OK
    - create a hash
    - for each num, check if compl is a value in hash; yes return [i, hash.get(compl)]
    - or put in hash; hash.put(nums[i], i)
Group Anagram
    - needs work
Top K Frequent Elements: 
    - make freq map 
    - add to priority queue, sort ascending
    - and extracting from heap; remove if size > k
** Need to work on Top K with PQs **
Top K Frequent Words: Tough; need to sort by freq and lex
Product of Array Except Self: OK	
Encode and Decode Strings   	
Longest Consecutive Sequence	


Two Pointers
Valid Palindrome:
    - change string to lowercase
    - stringbuild with only letters and nums
    - left, right pointers; stribuild left & right need to equal
3Sum
    - sort the array
    - for each element of array, fix one element
    - 2 pointers left (i+1) and right
    - calc sum of nums[i], nums[l], nums[r]
    - if sum = 0, add trio to the result; move both pointers in
    - if sum < 0; move left forward
    - if sum > 0; move right Back

Container With Most Water
    - 2 pointers l and r
    - calc wall height at 2 pointers; take shorter
    - calc volume at 2 pointers; take max volume
    - move the shorter wall

Sliding Window
Best Time to Buy And Sell Stock	
    - left & right index, calc prof and maxProf
Longest Substring Without Repeating Characters	
Longest Repeating Character Replacement	
Minimum Window Substring

Stack
Valid Parentheses
    - Stack; for each char, add to stack if an open par
    - else 
        - check top of stack; char top = stack.pop
        - if stack is empty, return false
        - if top of stack doesn't match current closing brack, return false
        - else pop the stack to remove the matching opening brack
    - after the loop, return if stack is empty



Binary Search - when looking for Time complex log(n) or better than linear => binary
    - Left, mid, right pointer; left <= right 
Find Minimum In Rotated Sorted Array	
Search In Rotated Sorted Array
    - Left, mid, right;
    - while left < right, calc mid
    - check if mid = targ; return mid
    - are we in left sorted? nums[left] <= nums[mid]
        -if targ > nums[mid] or targ < nums[left]
            search right: left = mid + 1
        -else search left; r = mid - 1
    - else we're in the right sorted portion
        - if targ < nums[mid] or targ > nums[r]
            r = mid - 1
        - else search right; l = mid + 1
    return -1



Linked List	
Reverse Linked List: Good for understanding class structures
Merge Two Sorted Lists	
Reorder List	
Remove Nth Node From End of List	
Linked List Cycle	
Merge K Sorted Lists	


Trees
Invert Binary Tree	
Maximum Depth of Binary Tree	
Same Tree	
Subtree of Another Tree	
Lowest Common Ancestor of a Binary Search Tree	
Binary Tree Level Order Traversal	
Validate Binary Search Tree	
Kth Smallest Element In a Bst	
Construct Binary Tree From Preorder And Inorder Traversal	
Binary Tree Maximum Path Sum	
Serialize And Deserialize Binary Tree	


Tries
Tree-like DS; used to store dynamic set of strings
Implement Trie Prefix Tree	
Design Add And Search Words Data Structure	
Word Search II

Heap / Priority Queue
Find Median From Data Stream

Backtracking
Combination Sum	
Word Search


Graphs
Number of Islands	
Clone Graph	
Pacific Atlantic Water Flow	
Course Schedule	
Number of Connected Components In An Undirected Graph   	
Graph Valid Tree   

Advanced Graph
Alien Dictionary

1-D Dynamic Programming
Climbing Stairs: It's a fibbonaci seq; n = (n-1) + (n-2)	
House Robber	
House Robber II	
Longest Palindromic Substring	
Palindromic Substrings	
Decode Ways	
Coin Change	
Maximum Product Subarray	
Word Break	
Longest Increasing Subsequence


2-D Dynamic Programming
Unique Paths	
Longest Common Subsequence


Greedy
Maximum Subarray	
Jump Game

Intervals
Insert Interval	
Merge Intervals	
Non Overlapping Intervals	
Meeting Rooms   	
Meeting Rooms II   

Math & Geometry
Rotate Image	
Spiral Matrix	
Set Matrix Zeroes

Bit Manipulation
Number of 1 Bits	
Counting Bits	
Reverse Bits	
Missing Number	
Sum of Two Integers




Deque: Double-ended; can add and remove from both sides
Queue: FIFO
Stack: LIFO

add: part of the Collections interface; throws an exception if the operation fails
Collections is parent intfc for List, Set, Queue  
offer: Part of Queue interface; returns false (not excep) if fails
Queue extends Collection, so only available for class implementing queue (so not in set or list)
Deque extends Queue