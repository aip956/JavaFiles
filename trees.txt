12/13 Women Who Code

parent - child relationship between nodes
Top to bottom
multiple types of trees; graph vs. tree (depends on number of nodes; one is binary tree)
single linked list is a type of tree

Real world applications of trees:
HTML DOM; document / html // head // body
AI: decision tree
Folders in operating system; have root and different folders, subfolders
JSON format: key, value, children

first node == Root node; level 0
Children are level 1
Leaf: child with no children
connection: Edge

how to traverse tree
breadth first postorder
Depth first search: Postorder, preorder, inorder, left-right

https://leetcode.com/articles/Figures/145_transverse.png

breadth: by layers 0, then left-right
depth first:
    postorder: bottom, left, right, top, by layer
    preorder: Top, bottom, left, right
    Inorder: Left, node, right

/big O 

     10
    /   \
  6     15
 /  \       \
3   8       20

Leetcode maxim depth of binary tree
Use breadth first; use queue
queue = []
return result = [10,6,15,3,8,20]


Add 10 to queue
while queue has any value, keep going
is there a right or left node? take out 6 from q to result
left node = 3, right = 8


dfs
https://leetcode.com/problems/binary-tree-preorder-traversal/
binary tree preorder traversal
1. create an array that will store all the nodes to return
2. helper function which takes the node 
    check if there is a node
    push the value of the accepted node to the array    
    check if left child or right child and call that function itself
3. Invoke funciton 
4. Return result 


const preorderTraversal = root => {
    let result = []
    function preorder(node) {
        if (node) {
            result.push(node.val)
            if (node.left) preorder(node.left)
            if (node.right) preorder(node.right)
        }
    }
    preorder(root)
    return result
}

https://leetcode.com/problems/binary-tree-inorder-traversal/solutions/1860290/tree-traversals-preorder-inorder-and-postorder-traverse-algorithms-all-in-one/


12/20
https://www.bigocheatsheet.com
wiki page: https://en.wikipedia.org/wiki/Binary_search_tree
visutreesort.com
every tree is a graph, but not vice-versa
leetcode binary tree preorder traversal: https://leetcode.com/problems/binary-tree-preorder-traversal/description/
graphs: https://pages.cs.wisc.edu/~vernon/cs367/notes/13.GRAPH.html#:~:text=Every%20tree%20is%20a%20graph,(they%20have%20no%20direction).
slides: https://docs.google.com/presentation/d/1IMZFeSPE9BBNQcMLW7d9d4C1jvVjq6RBoY1YBKrDpk0/edit?usp=sharing

create a var to contain the vals of the node and to be returned at the end
Check if there is a root, and if not, return result
Create a var array to imitate a stack
While or For loop to go through each node

            10
            / \
           6   8
          / \    \
         3   5     4

    result = []
    stack = [10]
    Does 10 have children, if has right, push, if has left, push
    result = [10]
    stack = [8, 5]
    result = 10, 6, 
    stack = [8,5,3]
    result = [10, 6, 3] LIFO
    3 has no childd,
    5 has no child
    go back to while - 5
    10, 6, 3. 5
    stack = 4
    result: 10,6,3,5,8,4; stack is now empty, exit while loop
    return result
    keep asking if there is a right child, left child
    